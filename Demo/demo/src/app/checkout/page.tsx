"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";

type Product = {
  id: string;
  name: string;
  price: number;
  image: string;
  quantity: number;
};

export default function CheckoutPage() {
  const [cart, setCart] = useState<Product[]>([]);
  const [totalPrice, setTotalPrice] = useState(0);
  const [discount, setDiscount] = useState(0);
  const [voucher, setVoucher] = useState("");
  const [customer, setCustomer] = useState({
    name: "",
    phone: "",
    address: "",
    payment: "cod",
    email: "",
  });
  const router = useRouter();

  useEffect(() => {
    const storedCart = JSON.parse(localStorage.getItem("cart") || "[]");
    setCart(storedCart);

    const total = storedCart.reduce(
      (sum: number, item: Product) => sum + item.price * item.quantity,
      0
    );
    setTotalPrice(total);

    const storedUser = localStorage.getItem("user");
    if (storedUser) {
      const user = JSON.parse(storedUser);
      setCustomer((prev) => ({
        ...prev,
        name: user.name || "",
        email: user.email || "",
      }));
    }
  }, []);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    setCustomer({ ...customer, [e.target.name]: e.target.value });
  };

  const handleCheckout = async () => {
    if (cart.length === 0) return alert("Gi·ªè h√†ng ƒëang tr·ªëng!");
    if (!customer.name || !customer.phone || !customer.address || !customer.email)
      return alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");

    const finalPrice = totalPrice - discount;

    const order = {
      ho_ten: customer.name,
      email: customer.email,
      phone: customer.phone,
      address: customer.address,
      payment: customer.payment,
      products: cart,
      totalPrice: finalPrice,
      discount,
      status: "Ch·ªù x√°c nh·∫≠n",
      createdAt: new Date().toISOString(),
    };

    try {
      await fetch("http://localhost:3003/orders", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(order),
      });

      localStorage.removeItem("cart");
      alert("ƒê·∫∑t h√†ng th√†nh c√¥ng!");
      router.push("/orders");
    } catch (error) {
      console.error("‚ùå L·ªói khi ƒë·∫∑t h√†ng:", error);
      alert("C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t h√†ng!");
    }
  };

  return (
    <div className="container mt-4">
      <h2>üõí X√°c nh·∫≠n thanh to√°n</h2>
      {cart.length === 0 ? (
        <p>Gi·ªè h√†ng tr·ªëng! <a href="/products">Ti·∫øp t·ª•c mua s·∫Øm ‚Üí</a></p>
      ) : (
        <div className="row">
          {/* Form */}
          <div className="col-md-6">
            <h4>Th√¥ng Tin Giao H√†ng</h4>
            <input type="text" className="form-control mb-2" placeholder="H·ªç v√† t√™n" name="name" value={customer.name} onChange={handleChange} />
            <input type="text" className="form-control mb-2" placeholder="Email" name="email" value={customer.email} onChange={handleChange} />
            <input type="text" className="form-control mb-2" placeholder="S·ªë ƒëi·ªán tho·∫°i" name="phone" value={customer.phone} onChange={handleChange} />
            <input type="text" className="form-control mb-2" placeholder="ƒê·ªãa ch·ªâ" name="address" value={customer.address} onChange={handleChange} />
            <select className="form-select mb-3" name="payment" value={customer.payment} onChange={handleChange}>
              <option value="cod">Thanh to√°n khi nh·∫≠n h√†ng (COD)</option>
              <option value="bank">Chuy·ªÉn kho·∫£n ng√¢n h√†ng</option>
              <option value="e-wallet">V√≠ ƒëi·ªán t·ª≠</option>
            </select>
          </div>

          {/* T√≥m t·∫Øt */}
          <div className="col-md-6">
            <h4>ƒê∆°n H√†ng C·ªßa B·∫°n</h4>
            <ul>
              {cart.map((p) => (
                <li key={p.id}>
                  {p.name} √ó {p.quantity} ‚Äî {(p.price * p.quantity).toLocaleString()}ƒë
                </li>
              ))}
            </ul>
            <p>T·∫°m t√≠nh: {totalPrice.toLocaleString()}ƒë</p>
            {discount > 0 && <p>Gi·∫£m gi√°: -{discount.toLocaleString()}ƒë</p>}
            <h5>T·ªïng ti·ªÅn: {(totalPrice - discount).toLocaleString()}ƒë</h5>
          </div>

          <button className="btn btn-success mt-3" onClick={handleCheckout}>
            ‚úÖ X√°c nh·∫≠n ƒë·∫∑t h√†ng
          </button>
        </div>
      )}
    </div>
  );
}
